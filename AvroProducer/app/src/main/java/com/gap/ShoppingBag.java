/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.gap;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class ShoppingBag extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4862696994809994007L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ShoppingBag\",\"namespace\":\"com.gap\",\"fields\":[{\"name\":\"bagId\",\"type\":\"string\"},{\"name\":\"externalCustomerId\",\"type\":\"int\"},{\"name\":\"market\",\"type\":{\"type\":\"enum\",\"name\":\"Market\",\"symbols\":[\"US\",\"CA\",\"EU\",\"JP\"]}},{\"name\":\"eventType\",\"type\":\"string\"},{\"name\":\"eventDateTime\",\"type\":\"long\"},{\"name\":\"item\",\"type\":{\"type\":\"record\",\"name\":\"LineItem\",\"fields\":[{\"name\":\"skuId\",\"type\":\"string\"},{\"name\":\"quantity\",\"type\":\"int\"},{\"name\":\"brand\",\"type\":\"string\"}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<ShoppingBag> ENCODER =
      new BinaryMessageEncoder<ShoppingBag>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<ShoppingBag> DECODER =
      new BinaryMessageDecoder<ShoppingBag>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<ShoppingBag> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<ShoppingBag> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<ShoppingBag> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<ShoppingBag>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this ShoppingBag to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a ShoppingBag from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a ShoppingBag instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static ShoppingBag fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence bagId;
  private int externalCustomerId;
  private com.gap.Market market;
  private java.lang.CharSequence eventType;
  private long eventDateTime;
  private com.gap.LineItem item;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ShoppingBag() {}

  /**
   * All-args constructor.
   * @param bagId The new value for bagId
   * @param externalCustomerId The new value for externalCustomerId
   * @param market The new value for market
   * @param eventType The new value for eventType
   * @param eventDateTime The new value for eventDateTime
   * @param item The new value for item
   */
  public ShoppingBag(java.lang.CharSequence bagId, java.lang.Integer externalCustomerId, com.gap.Market market, java.lang.CharSequence eventType, java.lang.Long eventDateTime, com.gap.LineItem item) {
    this.bagId = bagId;
    this.externalCustomerId = externalCustomerId;
    this.market = market;
    this.eventType = eventType;
    this.eventDateTime = eventDateTime;
    this.item = item;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return bagId;
    case 1: return externalCustomerId;
    case 2: return market;
    case 3: return eventType;
    case 4: return eventDateTime;
    case 5: return item;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: bagId = (java.lang.CharSequence)value$; break;
    case 1: externalCustomerId = (java.lang.Integer)value$; break;
    case 2: market = (com.gap.Market)value$; break;
    case 3: eventType = (java.lang.CharSequence)value$; break;
    case 4: eventDateTime = (java.lang.Long)value$; break;
    case 5: item = (com.gap.LineItem)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'bagId' field.
   * @return The value of the 'bagId' field.
   */
  public java.lang.CharSequence getBagId() {
    return bagId;
  }


  /**
   * Sets the value of the 'bagId' field.
   * @param value the value to set.
   */
  public void setBagId(java.lang.CharSequence value) {
    this.bagId = value;
  }

  /**
   * Gets the value of the 'externalCustomerId' field.
   * @return The value of the 'externalCustomerId' field.
   */
  public int getExternalCustomerId() {
    return externalCustomerId;
  }


  /**
   * Sets the value of the 'externalCustomerId' field.
   * @param value the value to set.
   */
  public void setExternalCustomerId(int value) {
    this.externalCustomerId = value;
  }

  /**
   * Gets the value of the 'market' field.
   * @return The value of the 'market' field.
   */
  public com.gap.Market getMarket() {
    return market;
  }


  /**
   * Sets the value of the 'market' field.
   * @param value the value to set.
   */
  public void setMarket(com.gap.Market value) {
    this.market = value;
  }

  /**
   * Gets the value of the 'eventType' field.
   * @return The value of the 'eventType' field.
   */
  public java.lang.CharSequence getEventType() {
    return eventType;
  }


  /**
   * Sets the value of the 'eventType' field.
   * @param value the value to set.
   */
  public void setEventType(java.lang.CharSequence value) {
    this.eventType = value;
  }

  /**
   * Gets the value of the 'eventDateTime' field.
   * @return The value of the 'eventDateTime' field.
   */
  public long getEventDateTime() {
    return eventDateTime;
  }


  /**
   * Sets the value of the 'eventDateTime' field.
   * @param value the value to set.
   */
  public void setEventDateTime(long value) {
    this.eventDateTime = value;
  }

  /**
   * Gets the value of the 'item' field.
   * @return The value of the 'item' field.
   */
  public com.gap.LineItem getItem() {
    return item;
  }


  /**
   * Sets the value of the 'item' field.
   * @param value the value to set.
   */
  public void setItem(com.gap.LineItem value) {
    this.item = value;
  }

  /**
   * Creates a new ShoppingBag RecordBuilder.
   * @return A new ShoppingBag RecordBuilder
   */
  public static com.gap.ShoppingBag.Builder newBuilder() {
    return new com.gap.ShoppingBag.Builder();
  }

  /**
   * Creates a new ShoppingBag RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ShoppingBag RecordBuilder
   */
  public static com.gap.ShoppingBag.Builder newBuilder(com.gap.ShoppingBag.Builder other) {
    if (other == null) {
      return new com.gap.ShoppingBag.Builder();
    } else {
      return new com.gap.ShoppingBag.Builder(other);
    }
  }

  /**
   * Creates a new ShoppingBag RecordBuilder by copying an existing ShoppingBag instance.
   * @param other The existing instance to copy.
   * @return A new ShoppingBag RecordBuilder
   */
  public static com.gap.ShoppingBag.Builder newBuilder(com.gap.ShoppingBag other) {
    if (other == null) {
      return new com.gap.ShoppingBag.Builder();
    } else {
      return new com.gap.ShoppingBag.Builder(other);
    }
  }

  /**
   * RecordBuilder for ShoppingBag instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ShoppingBag>
    implements org.apache.avro.data.RecordBuilder<ShoppingBag> {

    private java.lang.CharSequence bagId;
    private int externalCustomerId;
    private com.gap.Market market;
    private java.lang.CharSequence eventType;
    private long eventDateTime;
    private com.gap.LineItem item;
    private com.gap.LineItem.Builder itemBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.gap.ShoppingBag.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.bagId)) {
        this.bagId = data().deepCopy(fields()[0].schema(), other.bagId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.externalCustomerId)) {
        this.externalCustomerId = data().deepCopy(fields()[1].schema(), other.externalCustomerId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.market)) {
        this.market = data().deepCopy(fields()[2].schema(), other.market);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.eventType)) {
        this.eventType = data().deepCopy(fields()[3].schema(), other.eventType);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.eventDateTime)) {
        this.eventDateTime = data().deepCopy(fields()[4].schema(), other.eventDateTime);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.item)) {
        this.item = data().deepCopy(fields()[5].schema(), other.item);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (other.hasItemBuilder()) {
        this.itemBuilder = com.gap.LineItem.newBuilder(other.getItemBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing ShoppingBag instance
     * @param other The existing instance to copy.
     */
    private Builder(com.gap.ShoppingBag other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.bagId)) {
        this.bagId = data().deepCopy(fields()[0].schema(), other.bagId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.externalCustomerId)) {
        this.externalCustomerId = data().deepCopy(fields()[1].schema(), other.externalCustomerId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.market)) {
        this.market = data().deepCopy(fields()[2].schema(), other.market);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.eventType)) {
        this.eventType = data().deepCopy(fields()[3].schema(), other.eventType);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.eventDateTime)) {
        this.eventDateTime = data().deepCopy(fields()[4].schema(), other.eventDateTime);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.item)) {
        this.item = data().deepCopy(fields()[5].schema(), other.item);
        fieldSetFlags()[5] = true;
      }
      this.itemBuilder = null;
    }

    /**
      * Gets the value of the 'bagId' field.
      * @return The value.
      */
    public java.lang.CharSequence getBagId() {
      return bagId;
    }


    /**
      * Sets the value of the 'bagId' field.
      * @param value The value of 'bagId'.
      * @return This builder.
      */
    public com.gap.ShoppingBag.Builder setBagId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.bagId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'bagId' field has been set.
      * @return True if the 'bagId' field has been set, false otherwise.
      */
    public boolean hasBagId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'bagId' field.
      * @return This builder.
      */
    public com.gap.ShoppingBag.Builder clearBagId() {
      bagId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'externalCustomerId' field.
      * @return The value.
      */
    public int getExternalCustomerId() {
      return externalCustomerId;
    }


    /**
      * Sets the value of the 'externalCustomerId' field.
      * @param value The value of 'externalCustomerId'.
      * @return This builder.
      */
    public com.gap.ShoppingBag.Builder setExternalCustomerId(int value) {
      validate(fields()[1], value);
      this.externalCustomerId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'externalCustomerId' field has been set.
      * @return True if the 'externalCustomerId' field has been set, false otherwise.
      */
    public boolean hasExternalCustomerId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'externalCustomerId' field.
      * @return This builder.
      */
    public com.gap.ShoppingBag.Builder clearExternalCustomerId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'market' field.
      * @return The value.
      */
    public com.gap.Market getMarket() {
      return market;
    }


    /**
      * Sets the value of the 'market' field.
      * @param value The value of 'market'.
      * @return This builder.
      */
    public com.gap.ShoppingBag.Builder setMarket(com.gap.Market value) {
      validate(fields()[2], value);
      this.market = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'market' field has been set.
      * @return True if the 'market' field has been set, false otherwise.
      */
    public boolean hasMarket() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'market' field.
      * @return This builder.
      */
    public com.gap.ShoppingBag.Builder clearMarket() {
      market = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'eventType' field.
      * @return The value.
      */
    public java.lang.CharSequence getEventType() {
      return eventType;
    }


    /**
      * Sets the value of the 'eventType' field.
      * @param value The value of 'eventType'.
      * @return This builder.
      */
    public com.gap.ShoppingBag.Builder setEventType(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.eventType = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'eventType' field has been set.
      * @return True if the 'eventType' field has been set, false otherwise.
      */
    public boolean hasEventType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'eventType' field.
      * @return This builder.
      */
    public com.gap.ShoppingBag.Builder clearEventType() {
      eventType = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'eventDateTime' field.
      * @return The value.
      */
    public long getEventDateTime() {
      return eventDateTime;
    }


    /**
      * Sets the value of the 'eventDateTime' field.
      * @param value The value of 'eventDateTime'.
      * @return This builder.
      */
    public com.gap.ShoppingBag.Builder setEventDateTime(long value) {
      validate(fields()[4], value);
      this.eventDateTime = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'eventDateTime' field has been set.
      * @return True if the 'eventDateTime' field has been set, false otherwise.
      */
    public boolean hasEventDateTime() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'eventDateTime' field.
      * @return This builder.
      */
    public com.gap.ShoppingBag.Builder clearEventDateTime() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'item' field.
      * @return The value.
      */
    public com.gap.LineItem getItem() {
      return item;
    }


    /**
      * Sets the value of the 'item' field.
      * @param value The value of 'item'.
      * @return This builder.
      */
    public com.gap.ShoppingBag.Builder setItem(com.gap.LineItem value) {
      validate(fields()[5], value);
      this.itemBuilder = null;
      this.item = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'item' field has been set.
      * @return True if the 'item' field has been set, false otherwise.
      */
    public boolean hasItem() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'item' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.gap.LineItem.Builder getItemBuilder() {
      if (itemBuilder == null) {
        if (hasItem()) {
          setItemBuilder(com.gap.LineItem.newBuilder(item));
        } else {
          setItemBuilder(com.gap.LineItem.newBuilder());
        }
      }
      return itemBuilder;
    }

    /**
     * Sets the Builder instance for the 'item' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.gap.ShoppingBag.Builder setItemBuilder(com.gap.LineItem.Builder value) {
      clearItem();
      itemBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'item' field has an active Builder instance
     * @return True if the 'item' field has an active Builder instance
     */
    public boolean hasItemBuilder() {
      return itemBuilder != null;
    }

    /**
      * Clears the value of the 'item' field.
      * @return This builder.
      */
    public com.gap.ShoppingBag.Builder clearItem() {
      item = null;
      itemBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public ShoppingBag build() {
      try {
        ShoppingBag record = new ShoppingBag();
        record.bagId = fieldSetFlags()[0] ? this.bagId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.externalCustomerId = fieldSetFlags()[1] ? this.externalCustomerId : (java.lang.Integer) defaultValue(fields()[1]);
        record.market = fieldSetFlags()[2] ? this.market : (com.gap.Market) defaultValue(fields()[2]);
        record.eventType = fieldSetFlags()[3] ? this.eventType : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.eventDateTime = fieldSetFlags()[4] ? this.eventDateTime : (java.lang.Long) defaultValue(fields()[4]);
        if (itemBuilder != null) {
          try {
            record.item = this.itemBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("item"));
            throw e;
          }
        } else {
          record.item = fieldSetFlags()[5] ? this.item : (com.gap.LineItem) defaultValue(fields()[5]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<ShoppingBag>
    WRITER$ = (org.apache.avro.io.DatumWriter<ShoppingBag>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<ShoppingBag>
    READER$ = (org.apache.avro.io.DatumReader<ShoppingBag>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.bagId);

    out.writeInt(this.externalCustomerId);

    out.writeEnum(this.market.ordinal());

    out.writeString(this.eventType);

    out.writeLong(this.eventDateTime);

    this.item.customEncode(out);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.bagId = in.readString(this.bagId instanceof Utf8 ? (Utf8)this.bagId : null);

      this.externalCustomerId = in.readInt();

      this.market = com.gap.Market.values()[in.readEnum()];

      this.eventType = in.readString(this.eventType instanceof Utf8 ? (Utf8)this.eventType : null);

      this.eventDateTime = in.readLong();

      if (this.item == null) {
        this.item = new com.gap.LineItem();
      }
      this.item.customDecode(in);

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.bagId = in.readString(this.bagId instanceof Utf8 ? (Utf8)this.bagId : null);
          break;

        case 1:
          this.externalCustomerId = in.readInt();
          break;

        case 2:
          this.market = com.gap.Market.values()[in.readEnum()];
          break;

        case 3:
          this.eventType = in.readString(this.eventType instanceof Utf8 ? (Utf8)this.eventType : null);
          break;

        case 4:
          this.eventDateTime = in.readLong();
          break;

        case 5:
          if (this.item == null) {
            this.item = new com.gap.LineItem();
          }
          this.item.customDecode(in);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










