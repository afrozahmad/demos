/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.gap;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Properties;

import org.apache.avro.Schema;
import org.apache.avro.file.DataFileReader;
import org.apache.avro.file.FileReader;
import org.apache.avro.generic.GenericDatumReader;
import org.apache.avro.generic.GenericDatumWriter;
import org.apache.avro.io.DatumWriter;
import org.apache.avro.io.EncoderFactory;
import org.apache.avro.io.JsonEncoder;

import com.jayway.jsonpath.DocumentContext;
import com.jayway.jsonpath.JsonPath;

public class App {

	private static Properties loadProperties(String propertiesFilename) {
		Properties prop = new Properties();

		// ClassLoader loader = Thread.currentThread().getContextClassLoader();
		ClassLoader loader = App.class.getClassLoader();

		try (InputStream stream = loader.getResourceAsStream(propertiesFilename)) {
			if (stream == null) {
				throw new FileNotFoundException();
			}
			prop.load(stream);
		} catch (IOException e) {
			e.printStackTrace();
		}
		return prop;
	}

	public String getGreeting() {
		return "Hello World!";
	}

	public static void main(String[] args) throws IOException {
		App a = new App();

		List<String> jsonStrings = a.ingestFile("/Users/aahmad/development/java/Ingestor/app/events.avro");
		Properties props = App.loadProperties("promotions.properties");
		for (String s : jsonStrings) {
			if (a.matchFilter(s, props.getProperty("filter"), props.getProperty("filter-value"))) {
				System.out.println(s);
			}
		}

		jsonStrings = a.ingestFile("/Users/aahmad/development/java/Ingestor/app/type3.avro");
		props = App.loadProperties("example1.properties");
		for (String s : jsonStrings) {
			if (a.matchFilter(s, props.getProperty("filter"), props.getProperty("filter-value"))) {
				System.out.println(s);
			}
		}
		jsonStrings = a.ingestFile("/Users/aahmad/development/java/Ingestor/app/userinfo.avro");
		props = App.loadProperties("userinfo.properties");

		for (String s : jsonStrings) {
			if (a.matchFilter(s, props.getProperty("filter"), props.getProperty("filter-value"))) {
				System.out.println(s);
			}
		}

	}

	List<String> ingestFile(String avroFile) throws IOException {
		final GenericDatumReader<Object> reader = new GenericDatumReader<Object>();

		List<String> jsonObjects = new ArrayList<>();

		final File file = new File(avroFile);
		ByteArrayOutputStream baos = new ByteArrayOutputStream();

		final FileReader<Object> fileReader = DataFileReader.openReader(file, reader);
		try {
			final Schema schema = fileReader.getSchema();
			final DatumWriter<Object> writer = new GenericDatumWriter<Object>(schema);
			final JsonEncoder encoder = EncoderFactory.get().jsonEncoder(schema, baos);
			for (final Object datum : fileReader) {
				writer.write(datum, encoder);
				encoder.flush();
				jsonObjects.add(baos.toString());
				baos.reset();
			}
		} catch (Exception e) {
			// TODO: handle exception
		} finally {
			fileReader.close();
		}
		return jsonObjects;

	}

	boolean matchFilter(String json, String predicateFilter, String value) {
		if (predicateFilter == null || predicateFilter.isBlank() || value == null || value.isBlank()) {
			return true;
		}
		List<String> filterValues = Arrays.asList(value.trim().split("\\s*,\\s*"));
		
		DocumentContext jsonContext = JsonPath.parse(json);
		String jsonpathCreatorName = jsonContext.read(predicateFilter) + "";
		
		return filterValues.contains(jsonpathCreatorName);

	}

}
